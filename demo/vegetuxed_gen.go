package demo

// file generated by
// github.com.mh-cbon/mutexer
// do not edit

import "sync"

// Tomatex mutexes a Tomates
type Tomatex struct {
	embed Tomates
	mutex *sync.Mutex
}

// NewTomatex constructs a new Tomatex
func NewTomatex() *Tomatex {
	ret := &Tomatex{}
	return ret
}

// Push is mutexed
func (t *Tomatex) Push(x ...Tomate) *Tomates {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.Push(x...)
}

// Unshift is mutexed
func (t *Tomatex) Unshift(x ...Tomate) *Tomates {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.Unshift(x...)
}

// Pop is mutexed
func (t *Tomatex) Pop() Tomate {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.Pop()
}

// Shift is mutexed
func (t *Tomatex) Shift() Tomate {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.Shift()
}

// Index is mutexed
func (t *Tomatex) Index(s Tomate) int {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.Index(s)
}

// RemoveAt is mutexed
func (t *Tomatex) RemoveAt(i int) bool {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.RemoveAt(i)
}

// Remove is mutexed
func (t *Tomatex) Remove(s Tomate) bool {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.Remove(s)
}

// InsertAt is mutexed
func (t *Tomatex) InsertAt(i int, s Tomate) *Tomates {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.InsertAt(i, s)
}

// Splice is mutexed
func (t *Tomatex) Splice(start int, length int, s ...Tomate) []Tomate {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.Splice(start, length, s...)
}

// Slice is mutexed
func (t *Tomatex) Slice(start int, length int) []Tomate {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.Slice(start, length)
}

// Reverse is mutexed
func (t *Tomatex) Reverse() *Tomates {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.Reverse()
}

// Len is mutexed
func (t *Tomatex) Len() int {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.Len()
}

// Set is mutexed
func (t *Tomatex) Set(x []Tomate) *Tomates {
	t.mutex.Lock()
	defer t.mutex.Unlock()
	return t.embed.Set(x)
}
